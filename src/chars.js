/* Box drawing symbols
* https://en.wikipedia.org/wiki/Box-drawing_character
* ─ │ ┌ ┐ └ ┘
* ├ ┤ ┬ ┴ ┼
* ╭ ╮ ╯ ╰ ╱ ╲
* ╴ ╵ ╶ ╷ ×
*/

const char = ([src]) => src.replace(/\./g, ' ');

export const chars = {
    ' ': char`.....\n.....\n.....\n.....`,
    '!': char`.╷.\n.│.\n.╵.\n.╵.`,
    '"': char`.╷╷.\n.╵╵.\n....\n....`,
    '#': char`.......\n.─┼─┼─.\n.─┼─┼─.\n.......`,
    '$': char`.......\n.┌─┼─╴.\n.└─┼─┐.\n.╶─┼─┘.`,
    '%': char`.........\n.┌─┐╷....\n.└─┘│┌─┐.\n.   ╵└─┘.`,
    '&': char`.......\n..┌──..\n.┌┴─╴┌.\n.└───┘.`,
    '\'': char`.╷.\n.╵.\n...\n...`,
    '(': char`.╭.\n.│.\n.│.\n.╰.`,
    ')': char`.╮.\n.│.\n.│.\n.╯.`,
    '*': char`...╷...\n.─.×.─.\n...╵...\n.......`,
    '+': char`.......\n...╷...\n.──┼──.\n...╵...`,
    ',': char`...\n...\n...\n.│.`,
    '-': char`.......\n.......\n.─────.\n.......`,
    '.': char`...\n...\n...\n.╵.`,
    '/': char`....\n..╱.\n.╱..\n....`,
    '0': char`┌───────┐\n│   │   │\n│   │   │\n└───────┘`,
    '1': char`┌──────┐.\n└┐     │.\n┌┘     └┐\n└───────┘`,
    '2': char`┌───────┐\n├───    │\n│    ───┤\n└───────┘`,
    '3': char`┌───────┐\n├───    │\n├───    │\n└───────┘`,
    '4': char`┌─────┬─┐\n│       │\n└─┐     │\n..└─────┘`,
    '5': char`┌───────┐\n│    ───┤\n├───    │\n└───────┘`,
    '6': char`┌───────┐\n│    ───┤\n│    ── │\n└───────┘`,
    '7': char`┌───────┐\n└─┐     │\n..│     │\n..└─────┘`,
    '8': char`┌───────┐\n│  ───  │\n│  ───  │\n└───────┘`,
    '9': char`┌───────┐\n│ ──    │\n├───    │\n└───────┘`,
    ':': char`...\n...\n.╵.\n.╵.`,
    ';': char`...\n...\n.╵.\n.│.`,
    '<': char`...\n.╱.\n.╲.\n...`,
    '=': char`.......\n.─────.\n.─────.\n.......`,
    '>': char`...\n.╲.\n.╱.\n...`,
    '?': char`.┌───┐.\n...┌─┘.\n...╵...\n...╵...`,
    '@': char`.......\n┌─────┐\n│ ┌─┐ │\n╵ └─┴─┘`,
    'A': char`┌───────┐\n│   │   │\n│       │\n└───┴───┘`,
    'B': char`┌──────┐.\n│   ─  └┐\n│   ──  │\n└───────┘`,
    'C': char`┌───────┐\n│    ───┤\n│       │\n└───────┘`,
    'D': char`┌───────┐\n│     │ │\n│     │ │\n└───────┘`,
    'E': char`┌───────┐\n│    ───┤\n│    ───┤\n└───────┘`,
    'F': char`┌───────┐\n│    ───┤\n│     ┌─┘\n└─────┘..`,
    'G': char`┌───────┐\n│    ┌──┤\n│       │\n└───────┘`,
    'H': char`┌───┬───┐\n│       │\n│   │   │\n└───┴───┘`,
    'I': char`┌───────┐\n└┐     ┌┘\n┌┘     └┐\n└───────┘`,
    'J': char`..┌─────┐\n..│     │\n┌─┘     │\n└───────┘`,
    'K': char`┌───┬───┐\n│      ─┤\n│   │   │\n└───┴───┘`,
    'L': char`┌─────┐..\n│     │..\n│     └─┐\n└───────┘`,
    'M': char`┌───┬───┐\n│       │\n│ │   │ │\n└─┴───┴─┘`,
    'N': char`┌────┬──┐\n│    │  │\n│  │    │\n└──┴────┘`,
    'O': char`┌───────┐\n│   │   │\n│       │\n└───────┘`,
    'P': char`┌───────┐\n│    ── │\n│     ┌─┘\n└─────┘..`,
    'Q': char`┌───────┐\n│   │   │\n│       ┤\n└──────┴┘`,
    'R': char`┌───────┐\n│    ── │\n│      ─┤\n└───┴───┘`,
    'S': char`┌───────┐\n│     ──┤\n├──     │\n└───────┘`,
    'T': char`┌───────┐\n│       │\n└─┐   ┌─┘\n..└───┘..`,
    'U': char`┌───┬───┐\n│   │   │\n│       │\n└───────┘`,
    'V': char`┌───┬───┐\n│   │   │\n└┐     ┌┘\n.└─────┘.`,
    'W': char`┌─┬───┬─┐\n│ │   │ │\n│       │\n└───┴───┘`,
    'X': char`┌───┬───┐\n├─     ─┤\n│   │   │\n└───┴───┘`,
    'Y': char`┌───┬───┐\n│       │\n├──     │\n└───────┘`,
    'Z': char`┌───────┐\n├──     │\n│     ──┤\n└───────┘`,
    '[': char`.┌─.\n.│..\n.│..\n.└─.`,
    '\\': char`....\n.╲..\n..╲.\n....`,
    ']': char`.─┐.\n..│.\n..│.\n.─┘.`,
    '^': char`....\n.╱╲.\n....\n....`,
    '_': char`.......\n.......\n.......\n.─────.`,
    '`': char`...\n.╲.\n...\n...`,
    '{': char`..┌.\n.┌┘.\n.└┐.\n..└.`,
    '|': char`...\n.│.\n.│.\n...`,
    '}': char`.┐..\n.└┐.\n.┌┘.\n.┘..`,
    '~': char`.......\n.┌─┐...\n.  └─┘.\n.......`,
};

export const parsedChars = Object.keys(chars).reduce((memo, char) => Object.assign(memo, {
    [char]: chars[char] && chars[char].split('\n')
}), {});
